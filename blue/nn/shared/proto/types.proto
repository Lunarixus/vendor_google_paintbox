// Protobuffer version of hardware/interfaces/neuralnetworks/1.0/types.hal

syntax = "proto2";
option optimize_for = LITE_RUNTIME;

package paintbox_nn;

enum OperandType {
  FLOAT32 = 0;
  INT32 = 1;
  UINT32 = 2;
  TENSOR_FLOAT32 = 3;
  TENSOR_INT32 = 4;
  TENSOR_QUANT8_ASYMM = 5;
  OEM = 10000;
  TENSOR_OEM_BYTE = 10001;
}

enum OperandLifeTime {
  TEMPORARY_VARIABLE = 1;
  MODEL_INPUT = 2;
  MODEL_OUTPUT = 3;
  CONSTANT_COPY = 4;
  CONSTANT_REFERENCE = 5;
  NO_VALUE = 6;
}

message DataLocation {
  optional uint32 poolIndex = 1;
  optional uint32 offset = 2;
  optional uint32 length = 3;
}

message Operand {
  optional OperandType type = 1;
  repeated uint32 dimensions = 2;
  optional uint32 numberOfConsumers = 3;
  optional float scale = 4;
  optional int32 zeroPoint = 5;
  optional OperandLifeTime lifetime = 6;
  optional DataLocation location = 7;
}

// OperationType is removed as only OEM_OPERATION is supported
message Operation {
  repeated uint32 inputs = 1;
  repeated uint32 outputs = 2;
  // Oem Model index.
  optional int32 oemModel = 3;
}

message Model {
  repeated Operand operands = 1;
  repeated Operation operations = 2;
  repeated uint32 inputIndexes = 3;
  repeated uint32 outputIndexes = 4;
  optional bytes operandValues = 5;
  repeated uint64 poolSizes = 6;
  optional int64 modelId = 7;
}

message RequestArgument {
  optional bool hasNoValue = 1;
  optional DataLocation location = 2;
  repeated uint32 dimensions = 3;
}

message Request {
  repeated RequestArgument inputs = 1;
  repeated RequestArgument outputs = 2;
  repeated uint64 poolSizes = 3;
  repeated int32 inputPools = 4;
  repeated int32 outputPools = 5;
  optional int64 modelId = 6;
}

enum ErrorStatus {
  NONE = 0;
  DEVICE_UNAVAILABLE = 1;
  GENERAL_FAILURE = 2;
  OUTPUT_INSUFFICIENT_SIZE = 3;
  INVALID_ARGUMENT = 4;
}

message ModelPoolRequest {
  optional int64 modelId = 1;
}

message PrepareModelResponse {
  optional ErrorStatus error = 1;
  optional int64 modelId = 2;
}

message RequestResponse {
  optional ErrorStatus error = 1;
}

message DestroyModelRequest {
  optional int64 modelId = 6;
}

message DestroyModelResponse {
  optional ErrorStatus error = 1;
  optional int64 modelId = 2;
}
