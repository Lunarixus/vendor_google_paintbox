// Protobuffer version of hardware/interfaces/neuralnetworks/1.0/types.hal

syntax = "proto2";
option optimize_for = LITE_RUNTIME;

package paintbox_nn;

enum OperandType {
  FLOAT16 = 0;
  FLOAT32 = 1;
  INT8 = 2;
  UINT8 = 3;
  INT16 = 4;
  UINT16 = 5;
  INT32 = 6;
  UINT32 = 7;
  TENSOR_FLOAT16 = 8;
  TENSOR_FLOAT32 = 9;
  TENSOR_SYMMETRICAL_QUANT8 = 10;
}

enum OperationType {
  AVERAGE_POOL_FLOAT32 = 0;
  CONCATENATION_FLOAT32 = 1;
  CONV_FLOAT32 = 2;
  DEPTHWISE_CONV_FLOAT32 = 3;
  MAX_POOL_FLOAT32 = 4;
  L2_POOL_FLOAT32 = 5;
  DEPTH_TO_SPACE_FLOAT32 = 6;
  SPACE_TO_DEPTH_FLOAT32 = 7;
  LOCAL_RESPONSE_NORMALIZATION_FLOAT32 = 8;
  SOFTMAX_FLOAT32 = 9;
  RESHAPE_FLOAT32 = 10;
  SPLIT_FLOAT32 = 11;
  FAKE_QUANT_FLOAT32 = 12;
  ADD_FLOAT32 = 13;
  FULLY_CONNECTED_FLOAT32 = 14;
  CAST_FLOAT32 = 15;
  MUL_FLOAT32 = 16;
  L2_NORMALIZATION_FLOAT32 = 17;
  LOGISTIC_FLOAT32 = 18;
  RELU_FLOAT32 = 19;
  RELU6_FLOAT32 = 20;
  RELU1_FLOAT32 = 21;
  TANH_FLOAT32 = 22;
  DEQUANTIZE_FLOAT32 = 23;
  FLOOR_FLOAT32 = 24;
  GATHER_FLOAT32 = 25;
  RESIZE_BILINEAR_FLOAT32 = 26;
  LSH_PROJECTION_FLOAT32 = 27;
  LSTM_FLOAT32 = 28;
  SVDF_FLOAT32 = 29;
  RNN_FLOAT32 = 30;
  N_GRAM_FLOAT32 = 31;
  LOOKUP_FLOAT32 = 32;
}

message DataLocation {
  optional uint32 poolIndex = 1;
  optional uint32 offset = 2;
  optional uint32 length = 3;
}

message Operand {
  optional OperandType type = 1;
  repeated uint32 dimensions = 2;
  optional uint32 numberOfConsumers = 3;
  optional float scale = 4;
  optional int32 zeroPoint = 5;
  optional DataLocation location = 6;
}

message Operation {
  optional OperationType type = 1;
  repeated uint32 inputs = 2;
  repeated uint32 outputs = 3;
}

message InputOutputInfo {
  optional DataLocation location = 1;
  repeated uint32 dimensions = 2;
}

message Model {
  repeated Operand operands = 1;
  repeated Operation operations = 2;
  repeated uint32 inputIndexes = 3;
  repeated uint32 outputIndexes = 4;
  repeated bytes operandValues = 5;
}

message Request {
  repeated InputOutputInfo inputs = 1;
  repeated InputOutputInfo outputs = 2;
  repeated uint64 poolSizes = 3;
}

message Response {
  optional int32 result = 1;
}